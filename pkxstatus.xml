<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, January 31, 2022, 7:06 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "pkstatus" generated by Plugin Wizard -->

<muclient>
<plugin
   name="PKStatus"
   author="Kelaire"
   id="5553dc47019e1cffd349c172"
   language="Lua"
   purpose="Show &quot;PK&quot; statuses in a miniwindow"
   date_written="2022-01-31 19:06:12"
   requires="5.07"
   version="1.0"
   >

<description trim="n">
<![CDATA[
.----------------------------------------------------------------------------.
|                            PKX Status Window                               |
|----------------------------------------------------------------------------|
|pkx help -- Brings up the help section. (What you are reading now)          |
|                                                                            |
|pkx show -- Start displaying the miniwindow.                                |
|pkx hide -- Stop displaying the miniwindow.                                 |
|pkx status -- Resets miniwindow data.                                       |
|                                                                            |
'----------------------------------------------------------------------------'
]]>
</description>


</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>

  <trigger
   enabled="n"
   match="You do not page long messages."
   script="noPageSize"
   omit_from_output="y"
   sequence="100"
   group="pagecapturekel"
  >
  </trigger>
  
  <trigger
   enabled="n"
   match="You currently display (?<pageNum>.*) lines per page\."
   script="getPageSize"
   regexp="y"
   omit_from_output="y"
   sequence="100"
   group="pagecapturekel"
  >
  </trigger>

  <trigger
   enabled="y"
   match="{kelstatus}"
   regexp="n"
   script="startCapture"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="{/kelstatus}"
   regexp="n"
   script="endCapture"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="n"
   group="pkstatus"
   match=".*"
   regexp="y"
   keep_evaluating="y"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="n"
   group="pkstatus"
   match="^NODELIVER\s+Accept deliveries from various stores\s+(?<AutoFlag>YES|NO)(\s*)$"
   regexp="y"
   script="noDeliverStatus"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="pkstatus"
   match="^NOFOLLOW\s+Allow people / mobs to follow you\s+(?<AutoFlag>YES|NO)(\s*)$"
   regexp="y"
   script="noFolStatus"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="pkstatus"
   match="^PKOFF\s+Can attack other players\.\s+(?<AutoFlag>YES|NO)(\s*)$"
   regexp="y"
   script="pkOffStatus"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="pkstatus"
   match="^NOGIVE\s+Allow other players to give items to you\s+(?<AutoFlag>YES|NO)(\s*)$"
   regexp="y"
   script="noGiveStatus"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="pkstatus"
   match="^NOSUMMON\s+Allow people to summon you / gate to you\s+(?<AutoFlag>YES|NO)(\s*)$"
   regexp="y"
   script="noSumStatus"
   sequence="100"
  >
  </trigger> 
  
<!-- Auto Assist Captures --> 
  <trigger
   enabled="y"
   match="^You now accept followers\.$"
   regexp="y"
   script="noFolOff"
   sequence="100"
  >
  </trigger> 
  <trigger
   enabled="y"
   match="^You no longer accept followers\.$"
   regexp="y"
   script="noFolOn"
   sequence="100"
  >
  </trigger>
 
<!-- Auto PK Captures -->  
  <trigger
   enabled="y"
   match="^You will now accept deliveries\.$"
   regexp="y"
   script="noDeliverOff"
   sequence="100"
  >
  </trigger> 
  <trigger
   enabled="y"
   match="^You will no longer accept deliveries\.$"
   regexp="y"
   script="noDeliverOn"
   sequence="100"
  >
  </trigger>

<!-- Auto Sac Captures --> 
  <trigger
   enabled="y"
   match="^You will no longer accept items from other players\.$"
   regexp="y"
   script="noGiveOn"
   sequence="100"
  >
  </trigger> 
  <trigger
   enabled="y"
   match="^You will now accept items from other players\.$"
   regexp="y"
   script="noGiveOff"
   sequence="100"
  >
  </trigger>
  
<!-- Auto Loot Captures -->  
  <trigger
   enabled="y"
   match="^You are no longer immune to summon\.$"
   regexp="y"
   script="noSumOff"
   sequence="100"
  >
  </trigger> 
  <trigger
   enabled="y"
   match="^You are now immune to summoning\.$"
   regexp="y"
   script="noSumOn"
   sequence="100"
  >
  </trigger>
  
<!-- Auto Loot Captures -->  
  <trigger
   enabled="y"
   match="^You will no longer PK other players\.$"
   regexp="y"
   script="pkOffOn"
   sequence="100"
  >
  </trigger> 
  <trigger
   enabled="y"
   match="^You will now attack other players normally\.$"
   regexp="y"
   script="pkOffOff"
   sequence="100"
  >
  </trigger>


</triggers>

<!--  Aliases  -->

<aliases>
	<alias script="configSend" match="^pkx status$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="ShowHelp" match="^pkx( help)?$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="ShowWindow" match="^pkx show$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="HideWindow" match="^pkx hide$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
	<alias script="ResetWindow" match="^pkx reset$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
</aliases>


<script>

<![CDATA[

require "serialize"
require "wait"

-- Window variables
local z_order_plugin = "462b665ecb569efbf261422f"
local dragStart = nil	
local window = {}
local colours = {
	header = "#474747",
}
local headerSize = 20
local currentPageSize = 0 

-- On install, reset, get data, and draw the window.
function OnPluginInstall()
	setDefaults()

	if (GetVariable("pkstatuswindow") ~= nil) then	-- load saved variables if they exist
		luastmt = "obj = " .. GetVariable("pkstatuswindow")
		assert (loadstring (luastmt or "")) ()		
		window = obj
	else
		SetWindowDefaults() -- load window defaults
	end					
	InitializeWindow()
end

function OnPluginBroadcast (msg, id, name, text)
	if (id == '3e7dedbe37e44942dd46d264') then
		if (text == 'comm.tick') then
			if initialize_config then
				return
			else
				resetAutoData()
				initialize_config = true
			end
		end
	end
end

function OnPluginConnect()
	initialize_config = false
end

function OnPluginDisable()
	HideWindow()
end

function OnPluginClose()
    OnPluginDisable()
end

function getPageSize(name, line, args)
	currentPageSize = args.pageNum
end

function noPageSize(name, line, args)
	currentPageSize = 0
end

-- Window Defaults
function SetWindowDefaults()
	window = {
		id = "window_" .. GetPluginID(),
		top = 10,
		left = 10,
		width = 150,
		height = 90,
		show = true,
		font = "defaultFont",
		fontFamily = "Consolas",
		fontSize = 9,
		fontColor = "white",
		borderColor = "lightgray",
		backgroundColor = "black"
	}
end

-- Initialize the Window
function InitializeWindow()
	WindowCreate(window.id, window.left, window.top, window.width, window.height, miniwin.pos_center_all, miniwin.create_keep_hotspots, ColourNameToRGB(window.backgroundColor))
	WindowFont(window.id, window.font, window.fontFamily, window.fontSize, false, false, false, false, 1, 0)
	WindowPosition(window.id, window.left, window.top, miniwin.pos_stretch_to_view, miniwin.create_absolute_location)	

	if (window.show) then
		WindowShow(window.id, window.show)				
		if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
			CallPlugin(z_order_plugin, "boostMe", window.id)
		end
		Draw(window)
	end	
	CreateHotSpots()
end

-- Create the Hot Spots
function CreateHotSpots()
	WindowDeleteAllHotspots(window.id)

	-- Drag window
	WindowAddHotspot(window.id, "DragArea", 15, 0, window.width-15, headerSize, "", "", "", "", "mouseup", "Drag to move", miniwin.cursor_both_arrow, 0)
	WindowDragHandler(window.id, "DragArea", "dragmove", "dragrelease", 0)	

	-- Resize window
	WindowAddHotspot(window.id, "Resize", window.width-13, window.height-13, window.width-2, window.height-2,"", "", "", "", "mouseup", "Drag to resize", miniwin.cursor_nw_se_arrow, 0)
	WindowDragHandler(window.id, "Resize", "resizemove", "resizerelease", 0) 

	-- Help button (?)
	WindowAddHotspot(window.id, "DisplayHelp", 0, 0, 15, 15, "", "", "", "", "buttonmouseup", "", miniwin.cursor_hand, 0)

	-- Close button (x)
	WindowAddHotspot(window.id, "CloseMiniwindow", window.width-15, 0, window.width, 15, "", "", "", "", "buttonmouseup", "", miniwin.cursor_hand, 0)
end

-- Show the window
function ShowWindow()
	window.show = true
	WindowShow(window.id, true)
	if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
		CallPlugin(z_order_plugin, "boostMe", window.id)
	end
	Draw(window)
	CreateHotSpots()
	SaveWindow()	
end

-- Hide the window
function HideWindow()
	window.show = false
	WindowShow(window.id, false)
	Draw(window)
	SaveWindow()
end	

-- Reset to defaults
function ResetWindow()
	SetWindowDefaults()		
	SaveWindow()	
	InitializeWindow()				
	Draw(window)
end

-- Save save save!
function SaveWindow()
	SetVariable("pkstatuswindow", serialize.save_simple(window))
end	

-- Let's do the thing and draw the window!
function Draw(win)
	-- miniwin background
	WindowRectOp(win.id, miniwin.rect_fill , 0, 0, win.width, win.height, ColourNameToRGB(window.backgroundColor))	
	
	-- resize bars
	WindowLine(win.id, win.width-3,  win.height-2, win.width-2, win.height-3, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-4,  win.height-2, win.width-2, win.height-4, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-6,  win.height-2, win.width-2, win.height-6, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-7,  win.height-2, win.width-2, win.height-7, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-9,  win.height-2, win.width-2, win.height-9, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-10, win.height-2, win.width-2, win.height-10, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-12, win.height-2, win.width-2, win.height-12, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-13, win.height-2, win.width-2, win.height-13, ColourNameToRGB(window.backgroundColor), 0, 1)
	
	-- Header
	WindowRectOp(win.id, miniwin.rect_fill , 0, 0, window.width, headerSize, ColourNameToRGB(colours.header))
	WindowText(win.id, win.font, "PKX Status", (window.width)/2-(WindowTextWidth(win.id, win.font, "PKX Status")/2), 3, 0, 0, ColourNameToRGB("white"), true)
	WindowText(win.id, win.font, "x", window.width-15, 3, 0, 0, ColourNameToRGB("white"), true)
	WindowText(win.id, win.font, "?", 5, 3, 0, 0, ColourNameToRGB("white"), true)

	-- Window outline
	WindowRectOp(win.id, miniwin.rect_3d_rect , 0, 0, win.width, win.height, ColourNameToRGB(window.borderColor), ColourNameToRGB(window.borderColor))
	
	-- Window Text (Status Type)
	WindowText(win.id, win.font, "NoSumom", 5, 20, 0, 0, ColourNameToRGB(bgColor), true)
	WindowText(win.id, win.font, "NoFollow", 5, 32, 0, 0, ColourNameToRGB(bgColor), true)
	WindowText(win.id, win.font, "NoGive", 5, 44, 0, 0, ColourNameToRGB(bgColor), true)
	WindowText(win.id, win.font, "NoDeliver", 5, 56, 0, 0, ColourNameToRGB(bgColor), true)
	WindowText(win.id, win.font, "PKOff", 5, 70, 0, 0, ColourNameToRGB(bgColor), true)
	
	-- Window Text (Statuses)
	WindowText(win.id, win.font, NSStatus, 100, 20, 0, 0, ColourNameToRGB(NSColor), true)
	WindowText(win.id, win.font, NFStatus, 100, 32, 0, 0, ColourNameToRGB(NFColor), true)
	WindowText(win.id, win.font, NGStatus, 100, 44, 0, 0, ColourNameToRGB(NGColor), true)
	WindowText(win.id, win.font, NDStatus, 100, 56, 0, 0, ColourNameToRGB(NDColor), true)
	WindowText(win.id, win.font, PKStatus, 100, 70, 0, 0, ColourNameToRGB(PKColor), true)
	
	SaveWindow()	
end	

-- Handlers
function dragmove(flags, hotspot_id)							
	if (not dragStart) then
		dragStart = {
			x = WindowInfo(window.id, 14),
			y = WindowInfo(window.id, 15),
		}
	end		
	
	WindowPosition(window.id, 
					WindowInfo(window.id, 17) - dragStart.x, 
					WindowInfo(window.id, 18) - dragStart.y, 
					miniwin.pos_stretch_to_view, 
					miniwin.create_absolute_location)
end

function dragrelease(flags, hotspot_id)		
	window.left = WindowInfo(window.id, 10)
	window.top = WindowInfo(window.id, 11)
	
	dragStart = nil
	
	SaveWindow()
end

function resizemove(flags, hotspot_id) 
	window.width = WindowInfo(window.id, 17) - WindowInfo(window.id, 10)
	window.height = WindowInfo(window.id, 18) - WindowInfo(window.id, 11)
	
	WindowResize(window.id, window.width, window.height, ColourNameToRGB("gray"))
	WindowShow(window.id, true)
end

function resizerelease(flags, hotspot_id)
	SaveWindow()
	Draw(window)
	CreateHotSpots()
end

function mouseup(flags, hotspot_id)	
	if (bit.band(flags, miniwin.hotspot_got_rh_mouse) ~= 0) then
		local result = WindowMenu(window.id, 
			WindowInfo(window.id, 14),
			WindowInfo(window.id, 15),
			"Bring to front|Send to back")		
		
		if (result ~= "" and IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
			if result == "Send to back" then 
				CallPlugin(z_order_plugin, "dropMe", window.id)
			else
				CallPlugin(z_order_plugin, "boostMe", window.id)
			end
		end
	end
end

function buttonmouseup(flags, hotspot_id)
	if hotspot_id == "DisplayHelp" then
		ShowHelp()
	elseif hotspot_id == "CloseMiniwindow" then
		HideWindow()
	end
end

function ShowHelp()
	ColourNote("orange", "black", GetPluginInfo (GetPluginID (), 3))
end


-- DATA Stuff
function setDefaults()
	NSStatus = '';
	NFStatus = '';
	NGStatus = '';
	NDStatus = '';
	PKStatus = '';
	NSColor = '#2ae4f5';
	NFColor = '#2ae4f5';
	NGColor = '#2ae4f5';
	NDColor = '#2ae4f5';
	PKColor = '#2ae4f5';
	bgColor = '#2ae4f5';
end

function resetAutoData()
	setDefaults()
	
	wait.make (function()
			EnableTriggerGroup ("pagecapturekel", true)
            SendNoEcho("pagesize")
			wait.time(.5)
			EnableTriggerGroup ("pagecapturekel", false)
			wait.time(.5)
			SendNoEcho("pagesize 0")
			wait.time(.5)
			configSend()
			wait.time(.5)
			SendNoEcho("pagesize " .. currentPageSize)
    end)
	
end

-- Update the window
function configSend(name, line, args)
	    wait.make (function()
            wait.time(2)
			SendNoEcho("echo {kelstatus}")
			SendNoEcho("config")
			SendNoEcho("echo {/kelstatus}") 
    end)

end

-- Start the capture of the config output
function startCapture(name, line, args)
	EnableTriggerGroup ("pkstatus", true)
end

-- End the capture of the config output and draw the window
function endCapture(name, line, args)
	EnableTriggerGroup ("pkstatus", false)
	Draw(window)
end

-- get status of autoSac
function noDeliverStatus(name, line, args)
	flag = args.AutoFlag
	
	if flag == "NO" then 
		NDColor = "#38f52a"
		NDStatus = "ON"
	elseif flag == "YES" then 
		NDColor = "#f52a2a"
		NDStatus = "OFF"
	else 
		NDColor = "#2ae4f5"
		NDStatus = "ERROR"
	end
	
	ColourNote("Green","","NoDeliver: " .. NDStatus)
end

-- Get status of AutoPK
function noFolStatus(name, line, args)
	flag = args.AutoFlag
	
	if flag == "NO" then 
		NFColor = "#38f52a"
		NFStatus = "ON"
	elseif flag == "YES" then 
		NFColor = "#f52a2a"
		NFStatus = "OFF"
	else 
		NFColor = "#2ae4f5"
		NFStatus = "ERROR"
	end
	
	ColourNote("Green","","NoFollow: " .. NFStatus)
end

-- Get status of AutoAssist
function noSumStatus(name, line, args)
	flag = args.AutoFlag
	
	if flag == "NO" then 
		NSColor = "#38f52a"
		NSStatus = "ON"
	elseif flag == "YES" then 
		NSColor = "#f52a2a"
		NSStatus = "OFF"
	else 
		NSColor = "#2ae4f5"
		NSStatus = "ERROR"
	end
	
	ColourNote("Green","","NoSummon: " .. NSStatus)
end

-- Get status of Autoloot
function noGiveStatus(name, line, args)
	flag = args.AutoFlag
	
	if flag == "NO" then 
		NGColor = "#38f52a"
		NGStatus = "ON"
	elseif flag == "YES" then 
		NGColor = "#f52a2a"
		NGStatus = "OFF"
	else 
		NGColor = "#2ae4f5"
		NGStatus = "ERROR"
	end
	
	ColourNote("Green","","NoGive: " .. NGStatus)
end

-- Get status of PKOff
function pkOffStatus(name, line, args)
	flag = args.AutoFlag
	
	if flag == "NO" then 
		PKColor = "#38f52a"
		PKStatus = "ON"
	elseif flag == "YES" then 
		PKColor = "#f52a2a"
		PKStatus = "OFF"
	else 
		PKColor = "#2ae4f5"
		PKStatus = "ERROR"
	end
	
	ColourNote("Green","","PKOff: " .. PKStatus)
end

-- Helper functions to set the auto features when user sets them and update the window
function noSumOn(name, line, args)
	NSStatus = "ON"
	NSColor = "#38f52a"
	Draw(window)
end

function noFolOn(name, line, args)
	NFStatus = "ON"
	NFColor = "#38f52a"
	Draw(window)
end

function noDeliverOn(name, line, args)
	NDStatus = "ON"
	NDColor = "#38f52a"
	Draw(window)
end

function noGiveOn(name, line, args)
	NGStatus = "ON"
	NGColor = "#38f52a"
	Draw(window)
end

function noSumOff(name, line, args)
	NSStatus = "OFF"
	NSColor = "#f52a2a"
	Draw(window)
end

function noFolOff(name, line, args)
	NFStatus = "OFF"
	NFColor = "#f52a2a"
	Draw(window)
end

function noDeliverOff(name, line, args)
	NDStatus = "OFF"
	NDColor = "#f52a2a"
	Draw(window)
end

function noGiveOff(name, line, args)
	NGStatus = "OFF"
	NGColor = "#f52a2a"
	Draw(window)
end

function pkOffOff(name, line, args)
	PKStatus = "OFF"
	PKColor = "#f52a2a"
	Draw(window)
end

function pkOffOn(name, line, args)
	PKStatus = "On"
	PKColor = "#f52a2a"
	Draw(window)
end

]]>

</script>

</muclient>
